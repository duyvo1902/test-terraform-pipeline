name: "terrgrunt-build"

on:
  workflow_dispatch:
    inputs:
      service-name:
        description: "service name"
        required: true
      time-from:
        description: "time from"
        default: deva
        required: true  
      time-to:
        description: "time to"
        default: dev
        required: true
      service_version:
        description: "service version"
        required: true

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terragrunt-plan:
    runs-on: ubuntu-latest
    # Start localstack as services and export port number
    # services:
    #   aws:
    #     image: localstack/localstack:2.1.0
    #     env:
    #       DEFAULT_REGION: us-east-1
    #       AWS_ACCESS_KEY_ID: "test"
    #       AWS_SECRET_ACCESS_KEY: "test"
    #       AWS_PARAMSTORE_ENABLED: "false"
    #     ports:
    #       - 4566:4566
    # outputs:
    #   tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Checkout main branch from Github
        uses: actions/checkout@v2  

      - name: Override value file
        shell: bash
        run: |
          kind create cluster
          ls
          overwritepath=./environments/
          echo "generate deploy-time values"
          echo "audit:" >> ${overwritepath}test.yaml
          echo "  service: ${{ inputs.service-name }}" >> ${overwritepath}test.yaml
          echo "  time-from: ${{ inputs.time-from }}" >> ${overwritepath}test.yaml
          echo "  time-to: ${{ inputs.time-to }}" >> ${overwritepath}test.yaml
          cat ./environments/test.yaml

          helm upgrade -i ${{ inputs.service-name }} ./charts/ins-mvr-audit-report-state -f ./environments/test.yaml

          # Ignore exit codes for the wait command
          set +e
          kubectl wait --for=condition=Ready job/${{ inputs.service-name }} --timeout=10s 2>/dev/null
          set -e
          
          # kubectl wait --for=condition=Ready job/${{ inputs.service-name }} --timeout=1000s
          kubectl logs job/${{ inputs.service-name }} --follow --pod-running-timeout=1000s
          
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2

  #     - name: Setup Terragrunt
  #       uses: autero1/action-terragrunt@v1.3.2
  #       with:
  #         terragrunt_version: '0.46.3'

  #     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
  #     - name: Terragrunt Init
  #       run: terragrunt init -backend=false

  #     # Validate terraform files
  #     - name: Terragrunt Validate
  #       run: terragrunt validate

  #     # Create string output of Terraform Plan
  #     - name: Create String Output
  #       id: tf-plan-string
  #       run: |
  #         TERRAGRUNT_PLAN=$(terragrunt plan -no-color)
  #         delimiter="$(openssl rand -hex 8)"
  #         echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
  #         echo "## TERRAGRUNT Plan Output" >> $GITHUB_OUTPUT
  #         echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
  #         echo "" >> $GITHUB_OUTPUT
  #         echo '```terraform' >> $GITHUB_OUTPUT
  #         echo "$TERRAGRUNT_PLAN" >> $GITHUB_OUTPUT
  #         echo '```' >> $GITHUB_OUTPUT
  #         echo "</details>" >> $GITHUB_OUTPUT
  #         echo "${delimiter}" >> $GITHUB_OUTPUT

  #     - name: Terragrunt Plan
  #       id: tg-plan
  #       run: |
  #         cd environments/${{steps.prNamespaceExtraction.outputs.namespace}}
  #         export exitcode=0
  #         terragrunt plan -detailed-exitcode -no-color || export exitcode=$?

  #         echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
  #         if [ $exitcode -eq 1 ]; then
  #           echo terragrunt Plan Failed!
  #           exit 1
  #         else 
  #           exit 0
  #         fi

  #     # If this is a PR post the changes
  #     - name: Push Terragrunt Output to PR
  #       if: github.ref != 'refs/heads/main'
  #       uses: actions/github-script@v6
  #       env:
  #         SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
  #       with:
  #           github-token: ${{ secrets.GITHUB_TOKEN }}
  #           script: |
  #             const body = `${process.env.SUMMARY}`;
  #             github.rest.issues.createComment({
  #                 issue_number: context.issue.number,
  #                 owner: context.repo.owner,
  #                 repo: context.repo.repo,
  #                 body: body
  #             })

  # terragrunt-apply:
  #   name: 'terraform-apply'
  #   runs-on: ubuntu-latest
  #     # Start localstack as services and export port number
  #   services:
  #     aws:
  #       image: localstack/localstack:2.1.0
  #       env:
  #         DEFAULT_REGION: us-east-1
  #         AWS_ACCESS_KEY_ID: "test"
  #         AWS_SECRET_ACCESS_KEY: "test"
  #         AWS_PARAMSTORE_ENABLED: "false"
  #       ports:
  #         - 4566:4566
  #   needs: [terragrunt-plan]

  #   steps:
  #   # Checkout the repository to the GitHub Actions runner
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   - name: Export namespace in PR's title namespace
  #     id: prNamespaceExtraction
  #     shell: bash
  #     run: |
  #       if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
  #         namespace="bdd"
  #       else
  #         namespace_detect_pattern="(.*\[ns:)(.+)(:ns\].*)"
  #         if [[ $namespace =~ $namespace_detect_pattern ]]; then
  #           namespace=${BASH_REMATCH[2]}
  #         else
  #           namespace="dev"
  #         fi
  #       fi
  #       echo "namespace=$namespace"
  #       echo "namespace=$namespace" >> $GITHUB_OUTPUT

  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v2

  #   - name: Setup Terragrunt
  #     uses: autero1/action-terragrunt@v1.3.2
  #     with:
  #       terragrunt_version: '0.46.3'

  #   # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
  #   - name: Terragrunt Init
  #     run: terragrunt init -backend=false

  #   # Validate terraform files
  #   - name: Terragrunt Validate
  #     run: terragrunt validate

  #   - name: Terragrunt Apply
  #     run: |
  #       cd environments/${{steps.prNamespaceExtraction.outputs.namespace}}
  #       terragrunt apply -auto-approve

  #   - name: Validate on Localstack
  #     run: |
  #       echo "Check new S3 bucket"
  #       aws --endpoint-url http://localhost:4566 s3api list-buckets
  #       aws s3api --endpoint-url http://localhost:4566 list-objects --bucket my-bucket --query 'Contents[].{Key: Key, Size: Size}'
  #     env: 
  #       AWS_ACCESS_KEY_ID: "test"
  #       AWS_SECRET_ACCESS_KEY: "test"
  #       AWS_REGION: "us-east-1"
