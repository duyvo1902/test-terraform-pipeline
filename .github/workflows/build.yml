name: "terrgrunt-build"

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

jobs:
  automation:
    runs-on: ubuntu-latest
    # Start localstack as services and export port number
    services:
      aws:
        image: localstack/localstack:2.1.0
        env:
          DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: "test"
          AWS_SECRET_ACCESS_KEY: "test"
          AWS_PARAMSTORE_ENABLED: "false"
        ports:
          - 4566:4566

    steps:
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Checkout main branch from Github
        uses: actions/checkout@v2  

      - name: Export namespace in PR's title namespace
        id: prNamespaceExtraction
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            namespace="bdd"
          else
            namespace_detect_pattern="(.*\[ns:)(.+)(:ns\].*)"
            if [[ $namespace =~ $namespace_detect_pattern ]]; then
              namespace=${BASH_REMATCH[2]}
            else
              namespace="dev"
            fi
          fi
          echo "namespace=$namespace"
          echo "namespace=$namespace" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.3.2
        with:
          terragrunt_version: '0.46.3'

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terragrunt Init
        run: terragrunt init -backend=false

      # Validate terraform files
      - name: Terragrunt Validate
        run: terragrunt validate

      - name: Terragrunt Plan
        run: |
          cd environments/${{steps.prNamespaceExtraction.outputs.namespace}}
          terragrunt apply --auto-approve

      - name: Validate on Localstack
        run: |
          echo "Check new S3 bucket"
          aws --endpoint-url http://localhost:4566 s3api list-buckets
          aws s3api --endpoint-url http://localhost:4566 list-objects --bucket my-bucket --query 'Contents[].{Key: Key, Size: Size}'
        env: 
          AWS_ACCESS_KEY_ID: "test"
          AWS_SECRET_ACCESS_KEY: "test"
          AWS_REGION: "us-east-1"