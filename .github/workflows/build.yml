name: "terrgrunt-build"

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

jobs:
  automation:
    runs-on: ubuntu-latest
    # Start localstack as services and export port number
    services:
      aws:
        image: localstack/localstack:2.1.0
        env:
          DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: "test"
          AWS_SECRET_ACCESS_KEY: "test"
          AWS_PARAMSTORE_ENABLED: "false"
        ports:
          - 4566:4566

    steps:
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Checkout main branch from Github
        uses: actions/checkout@v2  

      - name: Export namespace in PR's title namespace
        id: prNamespaceExtraction
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            namespace="bdd"
          else
            namespace_detect_pattern="(.*\[ns:)(.+)(:ns\].*)"
            if [[ $namespace =~ $namespace_detect_pattern ]]; then
              namespace=${BASH_REMATCH[2]}
            else
              namespace="dev"
            fi
          fi
          echo "namespace=$namespace"
          echo "namespace=$namespace" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.3.2
        with:
          terragrunt_version: '0.46.3'

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terragrunt Init
        run: terragrunt init -backend=false

      # Validate terraform files
      - name: Terragrunt Validate
        run: terragrunt validate

      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAGRUNT_PLAN=$(terragrunt plan -no-color)
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Terragrunt Plan
        id: tg-plan
        run: |
          cd environments/${{steps.prNamespaceExtraction.outputs.namespace}}
          export exitcode=0
          terragrunt plan -detailed-exitcode -no-color || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo terragrunt Plan Failed!
            exit 1
          else 
            exit 0
          fi

      # If this is a PR post the changes
      - name: Push Terragrunt Output to PR
        if: github.ref != 'refs/heads/main'
        uses: actions/github-script@v6
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const body = `${process.env.SUMMARY}`;
              github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
              })

      # Terragrunt Apply
      - name: Terragrunt Apply
        run: |
          cd environments/${{steps.prNamespaceExtraction.outputs.namespace}}
          terragrunt apply -auto-approve

      - name: Validate on Localstack
        run: |
          echo "Check new S3 bucket"
          aws --endpoint-url http://localhost:4566 s3api list-buckets
          aws s3api --endpoint-url http://localhost:4566 list-objects --bucket my-bucket --query 'Contents[].{Key: Key, Size: Size}'
        env: 
          AWS_ACCESS_KEY_ID: "test"
          AWS_SECRET_ACCESS_KEY: "test"
          AWS_REGION: "us-east-1"